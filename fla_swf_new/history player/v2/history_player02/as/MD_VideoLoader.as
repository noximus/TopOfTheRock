//=================================================================================//--- Function to control videos//=================================================================================// private varsvar video_nc:NetConnection = new NetConnection();video_nc.connect(null);var video_ns:NetStream = new NetStream(video_nc);var progressBar:MovieClip;var progressBarBG:MovieClipvar scrubberControls:MovieClip;var	timeProrgress:MovieClip;var playPause:MovieClip;var volumeControls:MovieClip;var	scrubberControls:MovieClip;var alertText:MovieClip;var moviePlaying:Boolean;var time_interval:Number;//=================================================================================//--- Function to Check Status on Videos (Buffer)//=================================================================================/* These events get fired whenever the condition described is met */video_ns.onStatus = function(infoObject:Object) {	// Stream couldn't be found	if (infoObject.code ==  "NetStream.Play.StreamNotFound") {		alertText.alert_txt.text = "Error: Stream Not Found.";		video_mc.videoHolder.clear();	}	// Ran out of buffer time	else if (infoObject.code ==  "NetStream.Buffer.Empty") {		alertText.alert_txt.text = "Buffering Video...";		moviePlaying = false;		toggleMovieControls();	}	// Buffer is full again	else if (infoObject.code == "NetStream.Buffer.Full") {		alertText.alert_txt.text = "";		moviePlaying = true;		toggleMovieControls();		clearInterval(buffer_interval);	} 	// Movie finished playing	else if (infoObject.code == "NetStream.Play.Stop") {		// Play.Stop is not always reliable, so check elsewhere as well.		stopMovie();	};};//=================================================================================//--- Function to LOAD//=================================================================================/* This is the main function to load the video */function loadMDVideo(videoPath:String, videoBuffer:Number, videoWidth:Number, videoHeight:Number) {	// set buffer	if (videoBuffer != null || videoBuffer != undefined) {		video_ns.setBufferTime(videoBuffer);	} else {		video_ns.setBufferTime(10);	}	// rename all items	progressBar = video_mc.mc_controls.progressBar;	progressBarBG = video_mc.mc_controls.progressBarBG;	timeProrgress = video_mc.mc_controls.timeProgress;	timeProrgress._alpha=0;	playPause = video_mc.mc_controls.playBtn_mc;	volumeControls = video_mc.mc_controls.volume;	scrubberControls = video_mc.mc_controls.scrubber;	alertText = video_mc.mc_controls.alert;	innerShadow = video_mc.mc_controls.inner_shadow;				// if videoWidth and videoHeight, reposition all items accordingly	if (videoWidth && videoHeight) {		repositionItems(videoWidth, videoHeight);	};	// attach video and start playing	video_mc.videoHolder.attachVideo(video_ns);	video_ns.play(videoPath);	moviePlaying = true;	toggleMovieControls();			// fade video in	video_mc._alpha = 0;	alphaIn(video_mc);	// check loaded bytes	checkBytesLoaded(video_ns);	loaded_interval = setInterval(checkBytesLoaded, 500, video_ns);	time_interval = setInterval(checkTime, 500, video_ns);		alertText.alert_txt.text = "Loading Video...";	};//=================================================================================//--- Reposition Elements//=================================================================================/* Reposition all Elements if videoWidth & videoHeight are present */function repositionItems(videoWidth:Number, videoHeight:Number):Void {	var newHeight = videoHeight + 10;	// set background size	video_mc.videoBG_mc._width = videoWidth + 20;	video_mc.videoBG_mc._height = videoHeight + 50;		// set video size	video_mc.videoHolder._width = videoWidth;	video_mc.videoHolder._height = videoHeight;		// set inner shadow size	innerShadow._width = videoWidth;	innerShadow._height = videoHeight;		// set _y position for all items	progressBar._y = progressBarBG._y = timeProrgress._y = newHeight;	playPause._y = volumeControls._y = newHeight;	scrubberControls._y = newHeight + 9;	alertText._y = newHeight + 10;	// set _x position for items	volumeControls._x = Math.round(videoWidth - volumeControls._width) + 6;	// set new progress bar widths	//timeProgress._width = 0;		progressBarBG._width = videoWidth - 80;};//=================================================================================//--- Movie Preloader//=================================================================================/* This function adjusts the preloader bar accordingly (dark grey) */var loaded_interval:Number;function checkBytesLoaded(ns:NetStream) {    var pctLoaded:Number = Math.round(ns.bytesLoaded / ns.bytesTotal * 100);	var newW:Number = (progressBarBG._width * pctLoaded) / 100;		progressBar._width = newW;	    if (pctLoaded >= 100) {        clearInterval(loaded_interval);    }    }//=================================================================================//--- Movie Controls (Play/Pause)//=================================================================================/* Toggles between Play/Pause */function toggleMovieControls() {	//if (moviePlaying == true) {		//video_mc.mc_controls.playBtn_mc.gotoAndStop("pause");	//} else {		//video_mc.mc_controls.playBtn_mc.gotoAndStop("play");	//};};video_mc.mc_controls.pauseBtn_mc.onRelease = function() {	if (moviePlaying == true) {		video_ns.pause(true);		moviePlaying = false;		clearInterval(time_interval);	} else {		video_ns.pause(false);		moviePlaying = true;		time_interval = setInterval(checkTime, 500, video_ns);	}	}video_mc.mc_controls.stopBtn_mc.onRelease = function() {		stopMovie();		//video_ns.pause(false);		moviePlaying = false;		//time_interval = setInterval(checkTime, 500, video_ns);		}video_mc.mc_controls.playBtn_mc.onRelease = function() {	if (moviePlaying == false) {		video_ns.pause(false);		moviePlaying = true;		time_interval = setInterval(checkTime, 500, video_ns);	}	toggleMovieControls();};//=================================================================================//--- Scrubber//=================================================================================/* Function to control scrubber *///var startX:Number = 25;var startX:Number = 106;var movieDuration:Number;var movieSecs:Number;var ns_seconds:Number;video_ns.onMetaData = function(infoObject:Object) {	movieDuration = Math.floor(infoObject['duration']);};function checkTime(my_ns:NetStream) {    ns_seconds = my_ns.time;    movieSecs = Math.floor(ns_seconds);        var durationPercent:Number = (movieSecs * 100) / movieDuration;    var newX:Number = (durationPercent * video_mc.mc_controls.progressBarBG._width) / 100;        video_mc.mc_controls.timeProgress._width = Math.floor(newX);    video_mc.mc_controls.scrubber._x = Math.floor(startX + newX);    video_mc.mc_controls.timeProgress._alpha=100;    if (movieSecs == movieDuration) {		stopMovie();    };}video_mc.mc_controls.scrubber._alpha = 0;video_mc.mc_controls.scrubber.onRollOver = function() {	alphaIn(this);};video_mc.mc_controls.scrubber.onRollOut = function() {	alphaOut(this);};video_mc.mc_controls.scrubber.onPress = function() {	video_ns.pause(true);		clearInterval(time_interval);		this.startDrag(false, startX, this._y, progressBar._width + startX, this._y);	alertText.alert_txt.text = "Seeking...";	this.onEnterFrame = function() {		var xPercent:Number = Math.floor(this._x - startX);		var seekPercent:Number = Math.floor((xPercent * 100) / progressBarBG._width);				var seekX:Number = Math.floor((seekPercent * movieDuration) / 100);				video_ns.seek(seekX);		video_mc.mc_controls.timeProgress._width = this._x - startX;	//mc_controls	};};video_mc.mc_controls.scrubber.onRelease = function() {	alphaOut(this);	alertText.alert_txt.text = "";		video_ns.pause(false);	time_interval = setInterval(checkTime, 500, video_ns);		this.stopDrag();	delete this.onEnterFrame;};//=================================================================================//--- Function to Stop Movie//=================================================================================/* Sometimes Netstream.Play.Stop is not reliable, so use this instead! */function stopMovie() {	alertText.alert_txt.text = "";	moviePlaying = false;	toggleMovieControls();	video_mc.videoHolder.clear();	video_ns.seek(0);	video_ns.pause(true);	video_mc.mc_controls.timeProgress._width = 0;	video_mc.mc_controls.scrubber._x = startX;	clearInterval(time_interval);};//=================================================================================//--- Volume Controls//=================================================================================/* Uuhh. Volume controls. */this.createEmptyMovieClip("flvAudio_mc", this.getNextHighestDepth());flvAudio_mc.attachAudio(video_ns);var flvAudio:Sound = new Sound(flvAudio_mc);var volPercentage:Number;flvAudio.setVolume(100);video_mc.mc_controls.volume.vSlider.onPress = function() {	// move slider	this.startDrag(false, 0, 11, 15, 11);		// set volume & move mask	this.onEnterFrame = function() {		volPercentage = Math.round((this._x* 100) / 15);		trace(volPercentage);		flvAudio.setVolume(volPercentage);		this._parent.volMask_mc._width = Math.round(this._x);	};};video_mc.mc_controls.volume.vSlider.onRelease = function() {	this.stopDrag();	delete this.onEnterFrame;}video_mc.mc_controls.volume.vSlider.onReleaseOutside  = function() {	this.stopDrag();	delete this.onEnterFrame;}//=================================================================================//--- Alpha Functions//=================================================================================function alphaIn(mc:MovieClip):Void {	mc.onEnterFrame = function() {		if (mc._alpha < 100) {			mc._alpha += 6;		} else {			delete mc.onEnterFrame;		}	};};function alphaOut(mc:MovieClip):Void {	mc.onEnterFrame = function() {		if (mc._alpha > 0) {			mc._alpha -= 6;		} else {			delete mc.onEnterFrame;		}	};};